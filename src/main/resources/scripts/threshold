#!/bin/bash

## create options, default to NTFS non-dynamic

# open/close opened/waiting/failed/closed/flushed location path password

function print_usage {
  script_name=$(basename $0)
  cat <<EOF
Usage:
 - $script_name open <location> <path> <password>
 - $script_name close <location> <path>
 - $script_name closeall
 - $script_name apply (requires root access)
 - $script_name flush (requires root access)
 - $script_name restart (requires root access)
EOF
}

set -o nounset

function abort_check {
  if [ $1 != 0 ] ; then
    echo "Aborted"
    exit $1
  fi
}

function do_open {
  gate_password=$1
  gate_list_entry=$(grep "^\w\+ \w\+ $gate_location $gate_path" $gate_list)
  if [ "$(echo $gate_list_entry | wc -w)" == "0" ] ; then
    echo "open waiting $gate_location $gate_path $gate_password" >> $gate_list ; abort_check $?
  else
    sed -i -e "s,^\w\+ \(\w\+\) $gate_location $gate_path .\+,open \1 $gate_location $gate_path $gate_password," $gate_list ; abort_check $?
  fi

  if [ "$(echo $gate_list_entry | awk '{print $2}')" == "opened" ] ; then
    echo "Gate opened on '$gate_crypt'"
  else
    echo "Gate waiting on '$gate_crypt'"
  fi
}

function do_apply_open {
  if [ ! -d $gate_mount ] ; then
    mkdir -p $gate_mount
  fi

  if [ $(mount | grep $gate_mount -c) == 0 ] ; then
    echo "Mounting"
    mount -t cifs //$gate_location $gate_mount --verbose -o rw,noexec,user=wmtdev,password=***REMOVED***
    if [ $? != 0 ] ; then
      mark_status "failed"
      return $?
    fi
  fi

  if [ ! -d $gate_crypt ] ; then
    mkdir -p $gate_crypt
  fi

  if [ $(truecrypt -t -l --non-interactive | grep $gate_crypt -c) == 0 ] ; then
    echo "Opening"
    truecrypt -t --non-interactive --password=$gate_password $gate_mount/$gate_path $gate_crypt --fs-options="uid=$(id -u $gate_user),gid=$(id -g $gate_user)"
    if [ $? != 0 ] ; then
      mark_status "failed"
      return $?
    fi
  fi

  mark_status "opened"
  if [ $? != 0 ] ; then return $? ; fi

  echo "Gate opened on '$gate_crypt'"
}

function do_close {
  if [ $(grep "^\w\+ $gate_location $gate_path" $gate_list -c) != 0 ] ; then
    sed -i -e "s,^\w\+ $gate_location $gate_path,closed $gate_location $gate_path," $gate_list ; abort_check $?
  fi
  echo "Gate closed"
}

function do_apply_close {
  if [ -d $gate_crypt ] ; then
    if [ $(truecrypt -t -l --non-interactive | grep $gate_crypt -c) != 0 ] ; then
      truecrypt -t --non-interactive -d $gate_mount/$gate_path
    fi
  fi

  mark_status "closed"
  if [ $? != 0 ] ; then return $? ; fi

  echo "Gate closed"
}

function mark_status {
  sed -i -e "s,^\(\w\+\) \w\+ \($gate_location $gate_path .\+\),\1 $1 \2," $gate_list
}

function do_apply {
  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")
  for line in $(cat $gate_list) ; do
    setup_env $(echo $line | awk '{print $3}') $(echo $line | awk '{print $4}')
    gate_password=$(echo $line | awk '{print $5}')
    case "$(echo $line | awk '{print $1}')" in
      open) do_apply_open ;;
      closed) do_apply_close ;;
    esac
  done 
  IFS=$SAVEIFS
}

function do_close_all {
  sed -i -e 's,^open ,close ,' $gate_list
}

function do_flush {
  truecrypt -t --non-interactive -d --force
  umount /tmp/gates/*/fs
  killall -u jetty rsync
  sed -i -e "s,^\(\w\+\) \w\+ \(.\+\),\1 flushed \2," $gate_list
}

function do_restart {
  service jetty stop
  do_flush
  service jetty start
}

gate_mount_root=/tmp/gates
gate_list=$gate_mount_root/list
gate_user=jetty

if [ ! -f $gate_list ] ; then
  mkdir -p $gate_mount_root
  touch $gate_list
fi

function setup_env {
  gate_location=$1
  gate_location_desc=$(echo $gate_location | sed 's,[ /],-,g')
  gate_path=$2
  gate_path_desc=$(echo $gate_path | sed 's,[ /],-,g')
  gate_mount=$gate_mount_root/$gate_location_desc/fs
  gate_crypt=$gate_mount_root/$gate_location_desc/crypt-$gate_path_desc
}

case "$1" in
  open) setup_env $2 $3 ; do_open $4 ;;
  close) setup_env $2 $3 ; do_close ;;
  closeall) do_close_all ;;
  apply) do_apply ;;
  flush) do_flush ;;
  restart) do_restart ;;
  *) print_usage ; exit 1 ;;
esac
